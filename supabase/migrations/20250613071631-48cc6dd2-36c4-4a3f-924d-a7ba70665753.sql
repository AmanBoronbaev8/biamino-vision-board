
-- –°–æ–∑–¥–∞–µ–º enum –¥–ª—è —Ä–æ–ª–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
CREATE TYPE public.user_role AS ENUM ('admin', 'user', 'team');

-- –°–æ–∑–¥–∞–µ–º enum –¥–ª—è –æ—Ç–¥–µ–ª–æ–≤
CREATE TYPE public.department_type AS ENUM ('present', 'future');

-- –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
CREATE TABLE public.users (
  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
  email TEXT UNIQUE NOT NULL,
  role user_role NOT NULL,
  created_at TIMESTAMP WITH TIME ZONE DEFAULT now()
);

-- –í—Å—Ç–∞–≤–ª—è–µ–º –ø—Ä–µ–¥—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
INSERT INTO public.users (email, role) VALUES
  ('admin@biamino.com', 'admin'),
  ('user@biamino.com', 'user'),
  ('team@biamino.com', 'team');

-- –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É –ø—Ä–æ–µ–∫—Ç–æ–≤
CREATE TABLE public.projects (
  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
  title TEXT NOT NULL,
  description TEXT,
  emoji TEXT DEFAULT 'üìù',
  department department_type NOT NULL,
  status TEXT NOT NULL,
  secondary_status TEXT,
  goal TEXT,
  github_url TEXT,
  revenue BOOLEAN DEFAULT FALSE,
  revenue_amount TEXT,
  requirements TEXT,
  inventory TEXT,
  is_private BOOLEAN DEFAULT FALSE,
  created_at TIMESTAMP WITH TIME ZONE DEFAULT now(),
  updated_at TIMESTAMP WITH TIME ZONE DEFAULT now(),
  -- NDA flags
  goal_is_nda BOOLEAN DEFAULT FALSE,
  requirements_is_nda BOOLEAN DEFAULT FALSE,
  inventory_is_nda BOOLEAN DEFAULT FALSE,
  description_is_nda BOOLEAN DEFAULT FALSE
);

-- –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É –∫–∞—Å—Ç–æ–º–Ω—ã—Ö –ø–æ–ª–µ–π
CREATE TABLE public.custom_fields (
  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
  project_id UUID REFERENCES public.projects(id) ON DELETE CASCADE,
  key TEXT NOT NULL,
  value TEXT,
  is_nda BOOLEAN DEFAULT FALSE
);

-- –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É —Å—Å—ã–ª–æ–∫ –ø—Ä–æ–µ–∫—Ç–æ–≤
CREATE TABLE public.project_links (
  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
  project_id UUID REFERENCES public.projects(id) ON DELETE CASCADE,
  title TEXT NOT NULL,
  url TEXT NOT NULL,
  description TEXT
);

-- –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤
CREATE TABLE public.comments (
  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
  project_id UUID REFERENCES public.projects(id) ON DELETE CASCADE,
  user_id UUID REFERENCES public.users(id) ON DELETE CASCADE,
  content TEXT NOT NULL,
  created_at TIMESTAMP WITH TIME ZONE DEFAULT now()
);

-- –í–∫–ª—é—á–∞–µ–º Row Level Security –¥–ª—è –≤—Å–µ—Ö —Ç–∞–±–ª–∏—Ü
ALTER TABLE public.users ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.projects ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.custom_fields ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.project_links ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.comments ENABLE ROW LEVEL SECURITY;

-- –°–æ–∑–¥–∞–µ–º –ø–æ–ª–∏—Ç–∏–∫–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–≤—Å–µ –º–æ–≥—É—Ç —á–∏—Ç–∞—Ç—å)
CREATE POLICY "Everyone can view users" ON public.users FOR SELECT USING (true);

-- –°–æ–∑–¥–∞–µ–º –ø–æ–ª–∏—Ç–∏–∫–∏ –¥–ª—è –ø—Ä–æ–µ–∫—Ç–æ–≤
CREATE POLICY "Everyone can view public projects" ON public.projects 
  FOR SELECT USING (NOT is_private OR true);

CREATE POLICY "Admins can manage projects" ON public.projects 
  FOR ALL USING (true);

-- –ü–æ–ª–∏—Ç–∏–∫–∏ –¥–ª—è –∫–∞—Å—Ç–æ–º–Ω—ã—Ö –ø–æ–ª–µ–π
CREATE POLICY "Everyone can view custom fields" ON public.custom_fields 
  FOR SELECT USING (true);

CREATE POLICY "Admins can manage custom fields" ON public.custom_fields 
  FOR ALL USING (true);

-- –ü–æ–ª–∏—Ç–∏–∫–∏ –¥–ª—è —Å—Å—ã–ª–æ–∫ –ø—Ä–æ–µ–∫—Ç–æ–≤
CREATE POLICY "Everyone can view project links" ON public.project_links 
  FOR SELECT USING (true);

CREATE POLICY "Admins can manage project links" ON public.project_links 
  FOR ALL USING (true);

-- –ü–æ–ª–∏—Ç–∏–∫–∏ –¥–ª—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤
CREATE POLICY "Everyone can view comments" ON public.comments 
  FOR SELECT USING (true);

CREATE POLICY "Everyone can create comments" ON public.comments 
  FOR INSERT WITH CHECK (true);

CREATE POLICY "Admins can delete comments" ON public.comments 
  FOR DELETE USING (true);

-- –°–æ–∑–¥–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è updated_at
CREATE OR REPLACE FUNCTION update_updated_at_column()
RETURNS TRIGGER AS $$
BEGIN
  NEW.updated_at = now();
  RETURN NEW;
END;
$$ language 'plpgsql';

-- –°–æ–∑–¥–∞–µ–º —Ç—Ä–∏–≥–≥–µ—Ä –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è updated_at
CREATE TRIGGER update_projects_updated_at BEFORE UPDATE ON public.projects
  FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();
